<?php

namespace michelle;

use Carbon\Carbon;
use League\Fractal\Pagination\CursorInterface;
use League\Fractal\Serializer\ArraySerializer;

class MyArraySerializer extends ArraySerializer {

    /**
     * 对列表数据进行过滤，转换
     * @param string $resouceKey
     * @param array $data
     * @return array
     */
    public function collection($resourceKey, array $data)
    {
        // parent::collection($resourceKey, $data); // TODO: Change the autogenerated stub

        //第一个循环，循环所有的记录
        foreach ($data as &$item) {
            //循环每一个记录的数据
            foreach ($item as &$itemSub) {
                if ($itemSub instanceof Carbon) {
                    $itemSub = $itemSub->format('Y-m-d H:i:s');
                } elseif (is_null($itemSub)) {
                    $itemSub = '';
                }
            }
        }

        if ($resourceKey === API_HIDDEN_KEY) {
            return $data;
        } else {
            return ['data' => $data];
        }
    }

    /**
     * 对单个数据进行过滤转换
     * @param string $resouceKey
     * @param array $data
     * @return array|string
     */
    public function item($resourceKey, array $data)
    {
        //return parent::item($resourceKey, $data); // TODO: Change the autogenerated stub

        //因为是单个对象，所以只需要一层循环
        foreach ($data as &$item) {
            if ($item instanceof Carbon) {
                $item = $item->format('Y-m-d H:i:s');
            } elseif (is_null($item)) {
                $item = '';
            }
        }

        if ($resourceKey === API_HIDDEN_KEY) {
            return $data;
        } else {
            return ['data' => $data];
        }
    }
}